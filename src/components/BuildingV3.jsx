/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useStore } from "../store/store";
import { useSpring, animated, easings } from "@react-spring/three";
import * as THREE from "three";
import gsap from "gsap";
import { useThree } from "@react-three/fiber";
import { ang2Rad, rad2Ang } from "../helper/math";

export default function Model(props) {
  const { nodes, materials, scene } = useGLTF("./models/OPL.glb");
  console.log(nodes);

  const gap = 1.8;

  const selectedMaterial = new THREE.MeshStandardMaterial({
    color: 0xd7b176,
  });

  const {
    selected9th,
    selected8th,
    selected7th,
    selected6th,
    selected5th,
    selected4th,
    selected3rd,
    selected2nd,
    selected1st,
    selected0th,
    setSelected9th,
    setSelected8th,
    setSelected7th,
    setSelected6th,
    setSelected5th,
    setSelected4th,
    setSelected3rd,
    setSelected2nd,
    setSelected1st,
    setSelected0th,
    track,
    setVrModal,
  } = useStore();

  const {
    roofPos,
    f9Pos,
    f8Pos,
    f7Pos,
    f6Pos,
    f5Pos,
    f4Pos,
    f3Pos,
    f2Pos,
    f1Pos,
    f0Pos,
  } = useSpring({
    config: {
      duration: 1000,
      easing: easings.easeInOutCubic,
    },
    // roofPos: track === 99 ? [26.49, 33.19 * gap, -52.96] : [26.49, 33.19, -52.96],
    f9Pos: track === 99 ? [27.57, 29.56 * gap, -52.81] : [27.57, 29.56, -52.81],
    f8Pos: track === 99 ? [27.04, 26.18 * gap, -55.63] : [27.04, 26.18, -55.63],
    f7Pos: track === 99 ? [27.09, 23.04 * gap, -54.28] : [27.09, 23.04, -54.28],
    f6Pos: track === 99 ? [27.18, 19.47 * gap, -54.21] : [27.18, 19.47, -54.21],
    f5Pos: track === 99 ? [27.3, 16.02 * gap, -53.99] : [27.3, 16.02, -53.99],
    f4Pos: track === 99 ? [27.28, 12.66 * gap, -53.97] : [27.28, 12.66, -53.97],
    f3Pos: track === 99 ? [27.18, 9.23 * gap, -54.04] : [27.18, 9.23, -54.04],
    f2Pos: track === 99 ? [27.16, 5.82 * gap, -54] : [27.16, 5.82, -54],
    f1Pos: track === 99 ? [27.13, 1.97 * gap, -53.65] : [27.13, 1.97, -53.65],
    f0Pos: track === 99 ? [27.23, 0, -54.04] : [27.23, 0.5, -54.04],
    f_1Pos: track === 99 ? [27.23, -2 * gap, -54.04] : [27.23, -2, -54.04],
  });

  const handleSelect = (e) => {
    e.stopPropagation();
    if (track !== 99) return;
    switch (e.eventObject.level) {
      case 9:
        setSelected9th(!selected9th);
        break;
      case 8:
        setSelected8th(!selected8th);
        break;
      case 7:
        setSelected7th(!selected7th);
        break;
      case 6:
        setSelected6th(!selected6th);
        break;
      case 5:
        setSelected5th(!selected5th);
        break;
      case 4:
        setSelected4th(!selected4th);
        break;
      case 3:
        setSelected3rd(!selected3rd);
        break;
      case 2:
        setSelected2nd(!selected2nd);
        break;
      case 1:
        setSelected1st(!selected1st);
        break;
      case 0:
        setSelected0th(!selected0th);
        break;
      default:
    }
  };
  const { camera } = useThree();

  useEffect(() => {
    const target = new THREE.Vector3();

    const tempPos = camera.position;

    const pos = {
      x: 100,
      y: 100,
      z: 100,
    };
    if (track === 99) {
      pos.x = 0;
      pos.y = 0;
      pos.z = 60;
    } else if (track === 100) {
      pos.x = 60;
      pos.y = 60;
      pos.z = 60;
    } else if (track > 0) {
      pos.x = 10;
      pos.y = 36 - track * 2;
      pos.z = 10;
    } else {
      pos.x = 0;
      pos.y = 0;
      pos.z = 35;
    }

    gsap.to(camera.position, {
      ...pos,
      duration: 2,
      ease: "power2.inOut",
      onUpdate: () => {
        camera.lookAt(0, 0, 0);
      },
    });
    // gsap.to(camera, { fov: 100, duration: 1 });
  }, [track]);

  useEffect(() => {
    if (scene) {
      scene.traverse((n) => {
        if (n.isMesh) {
          n.castShadow = true;
          n.receiveShadow = true;
          if (n.material.map) n.material.map.anisotropy = 16;
        }
      });
    }
  }, [scene]);

  return (
    // <primitive object={scene} />

    <group {...props} dispose={null}>
      <animated.group
        level={9}
        visible={track > 2 && track < 90 ? false : true}
        position={f9Pos}
        onClick={handleSelect}
      >
        <primitive object={nodes["09_Level"]} />
      </animated.group>
      <animated.group
        level={8}
        visible={track > 3 && track < 90 ? false : true}
        position={f8Pos}
        onClick={handleSelect}
      >
        <primitive object={nodes["08_Level"]} />
      </animated.group>
      <animated.group
        level={7}
        visible={track > 4 && track < 90 ? false : true}
        position={f7Pos}
        onClick={handleSelect}
      >
        <primitive object={nodes["07_Level"]} />
      </animated.group>

      <animated.group
        level={6}
        visible={track > 5 && track < 90 ? false : true}
        position={f6Pos}
        onClick={handleSelect}
      >
        <primitive object={nodes["06Level"]} />
      </animated.group>

      <animated.group
        level={5}
        visible={track > 6 && track < 90 ? false : true}
        position={f5Pos}
        onClick={handleSelect}
      >
        <primitive object={nodes["05_Level"]} />
      </animated.group>

      <animated.group
        level={4}
        visible={track > 7 && track < 90 ? false : true}
        position={f4Pos}
        onClick={handleSelect}
      >
        <primitive object={nodes["04_Level"]} />
      </animated.group>

      <animated.group
        level={3}
        visible={track > 8 && track < 90 ? false : true}
        position={f3Pos}
        onClick={handleSelect}
      >
        <primitive object={nodes["03_Level"]} />
      </animated.group>

      <animated.group
        level={2}
        visible={track > 9 && track < 90 ? false : true}
        position={f2Pos}
        onClick={handleSelect}
      >
        <primitive object={nodes["02_Level"]} />
      </animated.group>
      <animated.group
        level={1}
        visible={track > 10 && track < 90 ? false : true}
        position={f1Pos}
        onClick={handleSelect}
      >
        <primitive object={nodes["01_Level"]} />
      </animated.group>
      <animated.group
        level={0}
        visible={track > 11 && track < 90 ? false : true}
        position={f0Pos}
        onClick={handleSelect}
      >
        <primitive object={nodes["00_Level"]} />
      </animated.group>
      <animated.group
        level={0}
        visible={track > 12 && track < 90 ? false : true}
        position={f0Pos}
        onClick={handleSelect}
      >
        <primitive object={nodes["-01_Level"]} />
      </animated.group>
    </group>
  );
}

useGLTF.preload("./models/Export_OP1L-transformed.glb");
